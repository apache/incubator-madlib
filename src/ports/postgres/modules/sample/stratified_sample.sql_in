/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 * @file stratified_sample.sql_in
 *
 * @brief SQL functions for stratified sampling.
 * @date 07/19/2017
 *
 * @sa Given a table, stratified sampling returns a proportion of records
 * for each group (strata).
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')


/**
@addtogroup grp_strs

<div class="toc"><b>Contents</b>
<ul>
<li><a href="#strs">Stratified Sampling</a></li>
<li><a href="#notes">Notes</a></li>
<li><a href="#examples">Examples</a></li>
</ul>
</div>

@brief Provides stratified sampling function.

Given a table, stratified sampling returns a proportion of records for
each group (strata). It is possible to use with or without replacement
sampling methods, specify a set of target columns, and assume the
whole table is a single strata.

@anchor strs
@par Stratified Sampling

<pre class="syntax">
stratified_sample( 	source_table,
					output_table,
					proportion,
					grouping_cols,
					target_cols,
					with_replacement
          		 )
</pre>

\b Arguments
<dl class="arglist">
<dt>source_table</dt>
<dd>TEXT. Name of the table containing the input data. Must contain the
columns specified in the 'groupinhg_cols' and target_cols' parameters
below.</dd>
<dt>output_table</dt>
<dd>TEXT. Name of the table to store the sampled records.</dd>
<dt>proportion</dt>
<dd>FLOAT8. The ratio of sample size to the number of records.</dd>
<dt>grouping_cols</dt>
<dd>TEXT. (Default: NULL) The columns to distinguish each strata.</dd>
<dt>target_cols</dt>
<dd>TEXT. (Default: NULL) The columns to include in the output.</dd>
<dt>with_replacement</dt>
<dd>BOOLEAN. (Default: FALSE) The sampling method.</dd>
</dl>
@anchor notes
@par Notes

If grouping_cols is NULL, the whole table is treated as a single group and
sampled accordingly.

If target_cols is NULL or '*', all of the columns will be included in the
output table.

If with_replacement is TRUE, each sample is independent (the same row may
be selected in the sample set more than once). Else (if with_replacement
is FALSE), a row can be selected at most once.
);

@anchor examples
@par Examples

Please note that, due to the random nature of sampling, the output records
might differ.

-# Create an input table:
<pre class="syntax">
DROP TABLE IF EXISTS test;
CREATE TABLE test(
    id1 INTEGER,
    id2 INTEGER,
    gr1 INTEGER,
    gr2 INTEGER
);
INSERT INTO test VALUES
(1,0,1,1),
(2,0,1,1),
(3,0,1,1),
(4,0,1,1),
(5,0,1,1),
(6,0,1,1),
(7,0,1,1),
(8,0,1,1),
(9,0,1,1),
(9,0,1,1),
(9,0,1,1),
(9,0,1,1),
(0,1,1,2),
(0,2,1,2),
(0,3,1,2),
(0,4,1,2),
(0,5,1,2),
(0,6,1,2),
(10,10,2,2),
(20,20,2,2),
(30,30,2,2),
(40,40,2,2),
(50,50,2,2),
(60,60,2,2),
(70,70,2,2);
</pre>

-# Sample without replacement
<pre class="syntax">
DROP TABLE IF EXISTS out;
SELECT madlib.stratified_sample('test', 'out', 0.5, 'gr1,gr2', 'id1,id2', FALSE);
SELECT * FROM out ORDER BY gr1,gr2,id1,id2;
</pre>
<pre class="result">
 gr1 | gr2 | id1 | id2
-----+-----+-----+-----
   1 |   1 |   2 |   0
   1 |   1 |   4 |   0
   1 |   1 |   7 |   0
   1 |   1 |   8 |   0
   1 |   1 |   9 |   0
   1 |   1 |   9 |   0
   1 |   2 |   0 |   2
   1 |   2 |   0 |   3
   1 |   2 |   0 |   4
   2 |   2 |  20 |  20
   2 |   2 |  30 |  30
   2 |   2 |  40 |  40
   2 |   2 |  60 |  60
(13 rows)
</pre>

-# Sample with replacement
<pre class="syntax">
DROP TABLE IF EXISTS out;
SELECT madlib.stratified_sample('test', 'out', 0.5, 'gr1,gr2', 'id1,id2', TRUE);
SELECT * FROM out ORDER BY gr1,gr2,id1,id2;
</pre>
<pre class="result">
 gr1 | gr2 | id1 | id2
-------+-------+-------+-------
   1 |   1 |   3 |   0
   1 |   1 |   6 |   0
   1 |   1 |   6 |   0
   1 |   1 |   7 |   0
   1 |   1 |   7 |   0
   1 |   1 |   9 |   0
   1 |   2 |   0 |   1
   1 |   2 |   0 |   2
   1 |   2 |   0 |   6
   2 |   2 |  20 |  20
   2 |   2 |  30 |  30
   2 |   2 |  50 |  50
   2 |   2 |  50 |  50
</pre>
*/

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.stratified_sample(
	source_table       TEXT,
	output_table       TEXT,
	proportion         FLOAT8,
	grouping_cols      TEXT,
	target_cols        TEXT,
	with_replacement   BOOLEAN
) RETURNS VOID AS $$
    PythonFunction(sample, stratified_sample, stratified_sample)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `MODIFIES SQL DATA', `');

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.stratified_sample(
	source_table       TEXT,
	output_table       TEXT,
	proportion         FLOAT8,
	grouping_cols      TEXT,
	target_cols        TEXT
) RETURNS VOID AS $$
     SELECT MADLIB_SCHEMA.stratified_sample($1, $2, $3, $4, $5, FALSE);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `MODIFIES SQL DATA', `');
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.stratified_sample(
	source_table       TEXT,
	output_table       TEXT,
	proportion         FLOAT8,
	grouping_cols      TEXT
) RETURNS VOID AS $$
     SELECT MADLIB_SCHEMA.stratified_sample($1, $2, $3, $4, NULL, FALSE);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `MODIFIES SQL DATA', `');
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.stratified_sample(
	source_table       TEXT,
	output_table       TEXT,
	proportion         FLOAT8
) RETURNS VOID AS $$
     SELECT MADLIB_SCHEMA.stratified_sample($1, $2, $3, NULL, NULL, FALSE);
$$ LANGUAGE sql VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `MODIFIES SQL DATA', `');

-------------------------------------------------------------------------------

-- Online help
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.stratified_sample_help(
    message VARCHAR
) RETURNS VARCHAR AS $$
    PythonFunction(sample, stratified_sample, stratified_sample_help)
$$ LANGUAGE plpythonu IMMUTABLE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');

-------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.stratified_sample_help()
RETURNS VARCHAR AS $$
    SELECT MADLIB_SCHEMA.stratified_sample_help('');
$$ LANGUAGE sql IMMUTABLE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');
-------------------------------------------------------------------------------
