# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Weakly Connected Components

# Please refer to the wcc.sql_in file for the documentation

"""
@file wcc.py_in

@namespace graph
"""

import plpy
from utilities.utilities import _assert
from utilities.utilities import extract_keyvalue_params
from utilities.utilities import unique_string, split_quoted_delimited_str
from utilities.validate_args import columns_exist_in_table
from utilities.utilities import is_platform_pg, is_platform_hawq
from graph_utils import validate_graph_coding, get_graph_usage


def validate_wcc_args(schema_madlib, vertex_table, vertex_id, edge_table,
                      edge_params, out_table, grouping_cols_list, module_name):
    """
    Function to validate input parameters for wcc
    """
    validate_graph_coding(vertex_table, vertex_id, edge_table, edge_params,
                          out_table, module_name)
    if grouping_cols_list:
        # validate the grouping columns. We currently only support grouping_cols
        # to be column names in the edge_table, and not expressions!
        _assert(columns_exist_in_table(edge_table, grouping_cols_list, schema_madlib),
                "Weakly Connected Components error: "
                "One or more grouping columns specified do not exist!")


def prefix_tablename_to_colnames(table, cols_list):
    return ' , '.join(["{0}.{1}".format(table, col) for col in cols_list])


def get_where_condition(table1, table2, cols_list):
    return ' AND '.join(['{0}.{2}={1}.{2}'.format(table1, table2, col)
                        for col in cols_list])


def wcc(schema_madlib, vertex_table, vertex_id, edge_table, edge_args,
        out_table, grouping_cols, **kwargs):
    """
    Function that computes the wcc

    Args:
        @param vertex_table
        @param vertex_id
        @param edge_table
        @param dest_vertex
        @param out_table
        @param grouping_cols
    """
    old_msg_level = plpy.execute("""
                                  SELECT setting
                                  FROM pg_settings
                                  WHERE name='client_min_messages'
                                  """)[0]['setting']
    plpy.execute('SET client_min_messages TO warning')
    params_types = {'src': str, 'dest': str}
    default_args = {'src': 'src', 'dest': 'dest'}
    edge_params = extract_keyvalue_params(edge_args, params_types, default_args)

    # populate default values for optional params if null
    if not vertex_id:
        vertex_id = "id"
    if not grouping_cols:
        grouping_cols = ''

    grouping_cols_list = split_quoted_delimited_str(grouping_cols)
    validate_wcc_args(schema_madlib, vertex_table, vertex_id, edge_table,
                      edge_params, out_table, grouping_cols_list,
                      'Weakly Connected Components')
    src = edge_params["src"]
    dest = edge_params["dest"]

    message = unique_string(desp='message')
    oldupdate = unique_string(desp='oldupdate')
    newupdate = unique_string(desp='newupdate')
    toupdate = unique_string(desp='toupdate')
    temp_out_table = unique_string(desp='tempout')

    distribution = '' if is_platform_pg() else "DISTRIBUTED BY ({0})".format(vertex_id)
    subq_prefixed_grouping_cols = ''
    comma_toupdate_prefixed_grouping_cols = ''
    comma_oldupdate_prefixed_grouping_cols = ''
    old_new_update_where_condition = ''
    new_to_update_where_condition = ''
    edge_to_update_where_condition = ''
    is_hawq = is_platform_hawq()

    INT_MAX = 2147483647
    component_id = 'component_id'
    grouping_cols_comma = '' if not grouping_cols else grouping_cols + ','
    comma_grouping_cols = '' if not grouping_cols else ',' + grouping_cols

    if grouping_cols:
        distribution = ('' if is_platform_pg() else
                        "DISTRIBUTED BY ({0}, {1})".format(grouping_cols, vertex_id))
        # Update some variables useful for grouping based query strings
        subq = unique_string(desp='subquery')
        distinct_grp_table = unique_string(desp='grptable')
        plpy.execute("""
                CREATE TABLE {distinct_grp_table} AS
                SELECT DISTINCT {grouping_cols} FROM {edge_table}
            """.format(**locals()))

        pttc = prefix_tablename_to_colnames
        gwc = get_where_condition

        comma_toupdate_prefixed_grouping_cols = ', ' + pttc(toupdate, grouping_cols_list)
        comma_oldupdate_prefixed_grouping_cols = ', ' + pttc(oldupdate, grouping_cols_list)
        subq_prefixed_grouping_cols = pttc(subq, grouping_cols_list)
        old_new_update_where_condition = ' AND ' + gwc(oldupdate, newupdate, grouping_cols_list)
        new_to_update_where_condition = ' AND ' + gwc(newupdate, toupdate, grouping_cols_list)
        edge_to_update_where_condition = ' AND ' + gwc(edge_table, toupdate, grouping_cols_list)
        join_grouping_cols = gwc(subq, distinct_grp_table, grouping_cols_list)
        group_by_clause_newupdate = ('' if not grouping_cols else
                           '{0}, {1}.{2}'.format(subq_prefixed_grouping_cols,
                                                 subq, vertex_id))
        plpy.execute("""
                CREATE TABLE {newupdate} AS
                SELECT {subq}.{vertex_id},
                        CAST({INT_MAX} AS INT) AS {component_id}
                        {select_grouping_cols}
                FROM {distinct_grp_table} INNER JOIN (
                    SELECT {select_grouping_cols_clause} {src} AS {vertex_id}
                    FROM {edge_table}
                    UNION
                    SELECT {select_grouping_cols_clause} {dest} AS {vertex_id}
                    FROM {edge_table}
                ) {subq}
                ON {join_grouping_cols}
                GROUP BY {group_by_clause_newupdate}
                {distribution}
            """.format(select_grouping_cols=',' + subq_prefixed_grouping_cols,
                       select_grouping_cols_clause=grouping_cols_comma,
                       **locals()))
        plpy.execute("""
                CREATE TEMP TABLE {message} AS
                SELECT {vertex_id},
                        CAST({vertex_id} AS INT) AS {component_id}
                        {select_grouping_cols_clause}
                FROM {newupdate}
                {distribution}
            """.format(select_grouping_cols_clause=comma_grouping_cols,
                       **locals()))
    else:
        plpy.execute("""
                CREATE TABLE {newupdate} AS
                SELECT {vertex_id}, CAST({INT_MAX} AS INT) AS {component_id}
                FROM {vertex_table}
                {distribution}
            """.format(**locals()))
        plpy.execute("""
                CREATE TEMP TABLE {message} AS
                SELECT {vertex_id}, CAST({vertex_id} AS INT) AS {component_id}
                FROM {vertex_table}
                {distribution}
            """.format(**locals()))
    if is_hawq:
        plpy.execute("""
                CREATE TABLE {temp_out_table} AS
                SELECT * FROM {newupdate}
                LIMIT 0
                {distribution}
            """.format(**locals()))
    nodes_to_update = 1
    while nodes_to_update > 0:
        # Look at all the neighbors of a node, and assign the smallest node id
        # among the neighbors as its component_id. The next table starts off
        # with very high component_id (INT_MAX). The component_id of all nodes
        # which obtain a smaller component_id after looking at its neighbors are
        # updated in the next table. At every iteration update only those nodes
        # whose component_id in the previous iteration are greater than what was
        # found in the current iteration.

        plpy.execute("DROP TABLE IF EXISTS {0}".format(oldupdate))
        plpy.execute("""
            CREATE TEMP TABLE {oldupdate} AS
            SELECT {message}.{vertex_id},
                    MIN({message}.{component_id}) AS {component_id}
                    {grouping_cols_select}
            FROM {message}
            GROUP BY {group_by_clause} {vertex_id}
            {distribution}
        """.format(grouping_cols_select='' if not grouping_cols else ', {0}'.format(grouping_cols),
                   group_by_clause=grouping_cols_comma,
                   **locals()))

        plpy.execute("DROP TABLE IF EXISTS {0}".format(toupdate))
        plpy.execute("""
            CREATE TEMP TABLE {toupdate} AS
            SELECT {oldupdate}.{vertex_id},
                    {oldupdate}.{component_id}
                    {comma_oldupdate_prefixed_grouping_cols}
            FROM {oldupdate}, {newupdate}
            WHERE {oldupdate}.{vertex_id}={newupdate}.{vertex_id}
                AND {oldupdate}.{component_id}<{newupdate}.{component_id}
                {old_new_update_where_condition}
            {distribution}
        """.format(**locals()))

        if is_hawq:
            plpy.execute("""
                    TRUNCATE TABLE {temp_out_table};
                    INSERT INTO {temp_out_table}
                        SELECT *
                        FROM {newupdate}
                        WHERE NOT EXISTS (
                            SELECT *
                            FROM {toupdate}
                            WHERE {newupdate}.{vertex_id}={toupdate}.{vertex_id}
                            {new_to_update_where_condition}
                        )
                        UNION
                        SELECT * FROM {toupdate};
                """.format(**locals()))
            plpy.execute("DROP TABLE {0}".format(newupdate))
            plpy.execute("ALTER TABLE {0} RENAME TO {1}".
                         format(temp_out_table, newupdate))
            plpy.execute("""
                    CREATE TABLE {temp_out_table} AS
                    SELECT * FROM {newupdate}
                    LIMIT 0
                    {distribution}
                """.format(**locals()))
        else:
            plpy.execute("""
                    UPDATE {newupdate} SET
                    {component_id}={toupdate}.{component_id}
                    FROM {toupdate}
                    WHERE {newupdate}.{vertex_id}={toupdate}.{vertex_id}
                        {new_to_update_where_condition}
                """.format(**locals()))

        plpy.execute("DROP TABLE IF EXISTS {0}".format(message))
        plpy.execute("""
            CREATE TEMP TABLE {message} AS
            SELECT {vertex_id}, MIN({component_id}) AS {component_id}
                    {select_grouping_cols}
            FROM (
                SELECT {edge_table}.{src} AS {vertex_id},
                    {toupdate}.{component_id}
                    {comma_toupdate_prefixed_grouping_cols}
                FROM {toupdate}, {edge_table}
                WHERE {edge_table}.{dest} = {toupdate}.{vertex_id}
                    {edge_to_update_where_condition}
                UNION ALL
                SELECT {edge_table}.{dest} AS {vertex_id},
                    {toupdate}.{component_id}
                    {comma_toupdate_prefixed_grouping_cols}
                FROM {toupdate}, {edge_table}
                WHERE {edge_table}.{src} = {toupdate}.{vertex_id}
                    {edge_to_update_where_condition}
            ) AS t
            GROUP BY {group_by_clause} {vertex_id}
        """.format(select_grouping_cols='' if not grouping_cols
                   else ', {0}'.format(grouping_cols), group_by_clause=''
                   if not grouping_cols else ' {0}, '.format(grouping_cols),
                   **locals()))

        plpy.execute("DROP TABLE {0}".format(oldupdate))
        if grouping_cols:
            nodes_to_update = plpy.execute("""
                                SELECT SUM(cnt) AS cnt_sum
                                FROM (
                                    SELECT COUNT(*) AS cnt
                                    FROM {toupdate}
                                    GROUP BY {grouping_cols}
                                ) t
                """.format(**locals()))[0]["cnt_sum"]
        else:
            nodes_to_update = plpy.execute("""
                                SELECT COUNT(*) AS cnt FROM {toupdate}
                            """.format(**locals()))[0]["cnt"]

    plpy.execute("ALTER TABLE {0} RENAME TO {1}".format(newupdate, out_table))
    plpy.execute("""DROP TABLE IF EXISTS {0},{1},{2},{3}
        """.format(message, oldupdate, newupdate, toupdate))
    if is_hawq:
        plpy.execute("""DROP TABLE IF EXISTS {0}""".format(temp_out_table))


def wcc_help(schema_madlib, message, **kwargs):
    """
    Help function for wcc

    Args:
        @param schema_madlib
        @param message: string, Help message string
        @param kwargs

    Returns:
        String. Help/usage information
    """
    if message is not None and \
            message.lower() in ("usage", "help", "?"):
        help_string = "Get from method below"
        help_string = get_graph_usage(
            schema_madlib,
            'Weakly Connected Components',
            """out_table     TEXT, -- Output table of weakly connected components
            grouping_col  TEXT -- Comma separated column names to group on
                               -- (DEFAULT = NULL, no grouping)
            """)
    else:
        if message is not None and \
                message.lower() in ("example", "examples"):
            help_string = """
----------------------------------------------------------------------------
                                EXAMPLES
----------------------------------------------------------------------------
-- Create a graph, represented as vertex and edge tables.
DROP TABLE IF EXISTS vertex, edge;
CREATE TABLE vertex(
    id INTEGER
);
CREATE TABLE edge(
    src INTEGER,
    dest INTEGER,
    user_id INTEGER
);
INSERT INTO vertex VALUES
(0),
(1),
(2),
(3),
(4),
(5),
(6),
(10),
(11),
(12),
(13),
(14),
(15),
(16);
INSERT INTO edge VALUES
(0, 1, 1),
(0, 2, 1),
(1, 2, 1),
(1, 3, 1),
(2, 3, 1),
(2, 5, 1),
(2, 6, 1),
(3, 0, 1),
(5, 6, 1),
(6, 3, 1),
(10, 11, 2),
(10, 12, 2),
(11, 12, 2),
(11, 13, 2),
(12, 13, 2),
(13, 10, 2),
(15, 16, 2),
(15, 14, 2);

-- Find all weakly connected components in the graph:
DROP TABLE IF EXISTS wcc_out;
SELECT madlib.weakly_connected_components(
             'vertex',             -- Vertex table
             'id',                 -- Vertix id column
             'edge',               -- Edge table
             'src=src, dest=dest', -- Comma delimted string of edge arguments
             'wcc_out');      -- Output table of weakly connected components

-- View the component ID associated with each vertex in the graph:
SELECT * FROM wcc_out ORDER BY component_id;

-- Find all weakly connected components associated with each user, using the
-- grouping feature:
DROP TABLE IF EXISTS wcc_out;
SELECT madlib.weakly_connected_components(
             'vertex',             -- Vertex table
             'id',                 -- Vertix id column
             'edge',               -- Edge table
             'src=src, dest=dest', -- Comma delimted string of edge arguments
             'wcc_out',       -- Output table of weakly connected components
             'user_id');           -- Grouping column

-- View the component ID associated with each vertex within the sub-graph
-- associated with each user:
SELECT * FROM wcc_out ORDER BY user_id, component_id;
"""
        else:
            help_string = """
----------------------------------------------------------------------------
                                SUMMARY
----------------------------------------------------------------------------
Given a directed graph, a weakly connected component is a sub-graph of the
original graph where all vertices are connected to each other by some path,
ignoring the direction of edges. In case of an undirected graph, a weakly
connected component is also a strongly connected component.
--
For an overview on usage, run:
SELECT {schema_madlib}.weakly_connected_components('usage');

For some examples, run:
SELECT {schema_madlib}.weakly_connected_components('example')
--
"""

    return help_string.format(schema_madlib=schema_madlib)
# ---------------------------------------------------------------------
