# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# PageRank

# Please refer to the pagerank.sql_in file for the documentation

"""
@file pagerank.py_in

@namespace graph
"""

import plpy
from utilities.control import MinWarning
from utilities.utilities import _assert
from utilities.utilities import extract_keyvalue_params
from utilities.utilities import unique_string
from utilities.control import IterationController2S
from graph_utils import *

import time

m4_changequote(`<!', `!>')

def validate_pagerank_args(vertex_table, vertex_id, edge_table, edge_params,
        out_table, damping_factor, max_iter, threshold, module_name):
    """
    Function to validate input parameters for PageRank
    """
    validate_graph_coding(vertex_table, vertex_id, edge_table, edge_params,
        out_table, module_name)
    _assert(damping_factor >= 0.0 and damping_factor <= 1.0,
        """PageRank: Invalid damping factor value ({0}), must be between 0 and 1."""
        .format(damping_factor))
    _assert(threshold >= 0.0 and threshold <= 1.0,
        """PageRank: Invalid threshold value ({0}), must be between 0 and 1."""
        .format(threshold))
    _assert(max_iter > 0,
        """PageRank: Invalid max_iter value ({0}), must be a positive integer. """
        .format(max_iter))

def pagerank(schema_madlib, vertex_table, vertex_id, edge_table, edge_args,
    out_table, damping_factor, max_iter, threshold, **kwargs):
    """
    Function that computes the PageRank

    Args:
        @param vertex_table
        @param vertex_id
        @param edge_table
        @param source_vertex
        @param dest_vertex
        @param out_table
        @param damping_factor
        @param max_iter
        @param threshold
    """
    old_msg_level = plpy.execute("""
                                  SELECT setting
                                  FROM pg_settings
                                  WHERE name='client_min_messages'
                                  """)[0]['setting']
    plpy.execute('SET client_min_messages TO warning')
    params_types = {'src': str, 'dest': str}
    default_args = {'src': 'src', 'dest': 'dest'}
    edge_params = extract_keyvalue_params(edge_args, params_types, default_args)

    # populate default values for optional params if null
    if damping_factor is None:
        damping_factor = 0.85
    if max_iter is None:
        max_iter = 100
    if threshold is None:
        threshold = 0.00001
    if vertex_id is None:
        vertex_id = "id"
    validate_pagerank_args(vertex_table, vertex_id, edge_table, edge_params,
        out_table, damping_factor, max_iter, threshold, 'PageRank')
    src = edge_params["src"]
    dest = edge_params["dest"]

    edge_temp_table = unique_string(desp='temp_edge')
    distribution = m4_ifdef(<!__POSTGRESQL__!>, <!''!>,
        <!"DISTRIBUTED BY ({0})".format(dest)!>)
    plpy.execute("""
        DROP TABLE IF EXISTS {edge_temp_table};
        CREATE TEMP TABLE {edge_temp_table} AS
        SELECT * FROM {edge_table}
        {distribution}
        """.format(**locals()))
    # GPDB and HAWQ have distributed by clauses to help them with indexing.
    # For Postgres we add the indices manually.
    sql_index = m4_ifdef(<!__POSTGRESQL__!>,
        <!"""CREATE INDEX ON {edge_temp_table} ({src});
        """.format(**locals())!>,
        <!''!>)
    plpy.execute(sql_index)

    nvertices = plpy.execute("""
            SELECT COUNT({0}) AS cnt
            FROM {1}
        """.format(vertex_id, vertex_table))[0]["cnt"]
    init_value = 1.0/nvertices
    random_prob = (1.0-damping_factor)/nvertices
    cur = unique_string(desp='cur')
    message = unique_string(desp='message')
    plpy.execute("""
            CREATE TEMP TABLE {cur} AS
            SELECT {vertex_id}, {init_value}::DOUBLE PRECISION AS pagerank
            FROM {vertex_table}
        """.format(**locals()))
    v1 = unique_string(desp='v1')

    out_cnts = unique_string(desp='out_cnts')
    out_cnts_cnt = unique_string(desp='cnt')
    # Compute the out-degree of every node in the graph.
    cnts_distribution = m4_ifdef(<!__POSTGRESQL__!>, <!''!>,
        <!"DISTRIBUTED BY ({0})".format(vertex_id)!>)

    plpy.execute("""
        DROP TABLE IF EXISTS {out_cnts};
        CREATE TEMP TABLE {out_cnts} AS
        SELECT {src} AS {vertex_id}, COUNT({dest}) AS {out_cnts_cnt}
        FROM {edge_table}
        GROUP BY {src}
        {cnts_distribution}
        """.format(**locals()))

    for i in range(max_iter):
        #####################################################################
        # PageRank for node 'A' at any given iteration 'i' is given by:
        # PR_i(A) = damping_factor(PR_i-1(B)/degree(B) + PR_i-1(C)/degree(C) + ...) + (1-damping_factor)/N
        # where 'N' is the number of vertices in the graph,
        # B, C are nodes that have edges to node A, and
        # degree(node) represents the number of outgoing edges from 'node'
        #####################################################################
        # Essentially, the pagerank for a node is based on an aggregate of a
        # fraction of the pagerank values of all the nodes that have incoming
        # edges to it, along with a small random probability.
        # More information can be found at:
        # https://en.wikipedia.org/wiki/PageRank#Damping_factor

        # The query below computes the PageRank of each node using the above formula.
        plpy.execute("""
                CREATE TABLE {message} AS
                SELECT {edge_temp_table}.{dest} AS {vertex_id},
                        SUM({v1}.pagerank/{out_cnts}.{out_cnts_cnt})*{damping_factor}+{random_prob} AS pagerank
                FROM {edge_temp_table}
                    INNER JOIN {cur} ON {edge_temp_table}.{dest}={cur}.{vertex_id}
                    INNER JOIN {out_cnts} ON {out_cnts}.{vertex_id}={edge_temp_table}.{src}
                    INNER JOIN {cur} AS {v1} ON {v1}.{vertex_id}={edge_temp_table}.{src}
                GROUP BY {edge_temp_table}.{dest}
            """.format(**locals()))
        # If there are nodes that have no incoming edges, they are not captured in the message table.
        # Insert entries for such nodes, with random_prob.
        plpy.execute("""
                INSERT INTO {message}
                SELECT {vertex_id}, {random_prob}::DOUBLE PRECISION AS pagerank
                FROM {cur}
                WHERE {vertex_id} NOT IN (
                    SELECT {vertex_id}
                    FROM {message}
                )
            """.format(**locals()))
        # Check for convergence will be done as part of grouping support for pagerank:
        # https://issues.apache.org/jira/browse/MADLIB-1082. So, the threshold parameter
        # is a dummy variable at the moment, the PageRank computation happens for
        # {max_iter} number of times.
        plpy.execute("""
                DROP TABLE IF EXISTS {cur};
                ALTER TABLE {message} RENAME TO {cur}
            """.format(**locals()))

    plpy.execute("ALTER TABLE {cur} RENAME TO {out_table}".format(**locals()))

    ## Step 4: Cleanup
    plpy.execute("""
        DROP TABLE IF EXISTS {0},{1},{2},{3};
        """.format(out_cnts, edge_temp_table, cur, message))
    plpy.execute("SET client_min_messages TO %s" % old_msg_level)

def pagerank_help(schema_madlib, message, **kwargs):
    """
    Help function for pagerank

    Args:
        @param schema_madlib
        @param message: string, Help message string
        @param kwargs

    Returns:
        String. Help/usage information
    """
    if message is not None and \
            message.lower() in ("usage", "help", "?"):
        help_string = "Get from method below"
        help_string = get_graph_usage(schema_madlib, 'PageRank',
            """out_table       TEXT,  -- Name of the output table for PageRank
    damping_factor, DOUBLE PRECISION, -- Damping factor in random surfer model
                                      -- (DEFAULT = 0.85)
    max_iter,       INTEGER,          -- Maximum iteration number (DEFAULT = 100)
    threshold       DOUBLE PRECISION  -- Stopping criteria (DEFAULT = 1e-5)
""")
    else:
        if message is not None and \
                message.lower() in ("example", "examples"):
            help_string = """
----------------------------------------------------------------------------
                                EXAMPLES
----------------------------------------------------------------------------
-- Create a graph, represented as vertex and edge tables.
DROP TABLE IF EXISTS vertex, edge;
CREATE TABLE vertex(
        id INTEGER
        );
CREATE TABLE edge(
        src INTEGER,
        dest INTEGER
        );
INSERT INTO vertex VALUES
(0),
(1),
(2),
(3),
(4),
(5),
(6);
INSERT INTO edge VALUES
(0, 1),
(0, 2),
(0, 4),
(1, 2),
(1, 3),
(2, 3),
(2, 5),
(2, 6),
(3, 0),
(4, 0),
(5, 6),
(6, 3);

-- Compute the PageRank:
DROP TABLE IF EXISTS pagerank_out;
SELECT madlib.pagerank(
             'vertex',             -- Vertex table
             'id',                 -- Vertix id column
             'edge',               -- Edge table
             'src=src, dest=dest', -- Comma delimted string of edge arguments
             'pagerank_out')       -- Output table of PageRank

-- View the PageRank of all vertices, sorted by their scores.
SELECT * FROM pagerank_out ORDER BY pagerank desc;
"""
        else:
            help_string = """
----------------------------------------------------------------------------
                                SUMMARY
----------------------------------------------------------------------------
Given a directed graph, pagerank algorithm finds the PageRank score of all
the vertices in the graph.
--
For an overview on usage, run:
SELECT {schema_madlib}.pagerank('usage');

For some examples, run:
SELECT {schema_madlib}.pagerank('example')
--
"""

    return help_string.format(schema_madlib=schema_madlib)
# ---------------------------------------------------------------------
