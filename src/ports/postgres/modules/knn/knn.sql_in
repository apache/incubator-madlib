/* ----------------------------------------------------------------------- *//**
 *
 * @file knn.sql_in
 *
 * @brief Set of functions for k-nearest neighbors.
 *
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

DROP TYPE IF EXISTS MADLIB_SCHEMA.knn_result CASCADE;
CREATE TYPE MADLIB_SCHEMA.knn_result AS (
    prediction float
);
DROP TYPE IF EXISTS MADLIB_SCHEMA.test_table_spec CASCADE;
CREATE TYPE MADLIB_SCHEMA.test_table_spec AS (
    id integer,
    vector DOUBLE PRECISION[]
);

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__knn_validate_src(
rel_source VARCHAR
) RETURNS VOID AS $$
    PythonFunction(knn, knn, knn_validate_src)
$$ LANGUAGE plpythonu
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `READS SQL DATA', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.knn(
    arg1 VARCHAR
) RETURNS VOID AS $$
BEGIN
    IF arg1 = 'help' THEN
	RAISE NOTICE 'You need to enter following arguments in order:
	Argument 1: Training data table having training features as vector column and labels
	Argument 2: Name of column having feature vectors in training data table
	Argument 3: Name of column having actual label/vlaue for corresponding feature vector in training data table
	Argument 4: Test data table having features as vector column. Id of features is mandatory
	Argument 5: Name of column having feature vectors in test data table
	Argument 6: Name of column having feature vector Ids in test data table
	Argument 7: Name of output table
	Argument 8: c for classification task, r for regression task
	Argument 9: value of k. Default will go as 1';
    END IF;
END;
$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `READS SQL DATA', `');

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.knn(
) RETURNS VOID AS $$
BEGIN    
    EXECUTE $sql$ select * from MADLIB_SCHEMA.knn('help') $sql$;
END;
$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `READS SQL DATA', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.knn(
    point_source VARCHAR,
    point_column_name VARCHAR,
    label_column_name VARCHAR,
    test_source VARCHAR,
    test_column_name VARCHAR,
    id_column_name VARCHAR,
    output_table VARCHAR,
    operation VARCHAR,
    k INTEGER
) RETURNS VARCHAR AS $$
DECLARE
    class_test_source REGCLASS;
    class_point_source REGCLASS;
    l FLOAT;
    outputTableFlag INTEGER;
    id INTEGER;
    vector DOUBLE PRECISION[];
    cur_pid integer;
    theResult MADLIB_SCHEMA.knn_result;
    r MADLIB_SCHEMA.test_table_spec;
    oldClientMinMessages VARCHAR;
    returnstring VARCHAR;
BEGIN
    oldClientMinMessages :=
        (SELECT setting FROM pg_settings WHERE name = 'client_min_messages');
    EXECUTE 'SET client_min_messages TO warning';
    PERFORM MADLIB_SCHEMA.__knn_validate_src(test_source);
    PERFORM MADLIB_SCHEMA.__knn_validate_src(point_source);
    class_test_source := test_source;
    class_point_source := point_source;
    --checks
    IF (k <= 0) THEN
        RAISE EXCEPTION 'KNN error: Number of neighbors k must be a positive integer.';
    END IF;
    IF (operation != 'c' AND operation != 'r') THEN
        RAISE EXCEPTION 'KNN error: put r for regression OR c for classification.';
    END IF;
    PERFORM MADLIB_SCHEMA.create_schema_pg_temp();
    
    EXECUTE 
	$sql$ 
	SELECT count(*) FROM information_schema.tables WHERE table_name = '$sql$ || output_table || $sql$'$sql$ into outputTableFlag; 
    IF (outputTableFlag != 0) THEN
	RAISE Exception '% table exists. Drop it or use different name', output_table;
    END IF;
    --EXECUTE format('DROP TABLE IF EXISTS %I',output_table);
    --EXECUTE format('CREATE TABLE %I(%I integer, %I DOUBLE PRECISION[], predlabel float)',output_table,id_column_name,test_column_name);
	
    EXECUTE
        $sql$
	DROP TABLE IF EXISTS pg_temp.madlib_knn_interm;
	CREATE TABLE pg_temp.madlib_knn_interm AS    
	select * from ( select row_number() over (partition by test_id order by dist) as r, x.* from (select test. $sql$ || id_column_name || $sql$ as test_id, madlib.squared_dist_norm2(train.$sql$ || point_column_name || $sql$,test.$sql$ || test_column_name || $sql$) as dist, $sql$ || label_column_name || $sql$ from $sql$ || textin(regclassout(point_source)) || $sql$ as train, $sql$ || textin(regclassout(test_source)) || $sql$ as test)x)y where y.r <= $sql$ || k;
	IF (operation = 'c') THEN
    	EXECUTE
        $sql$
	CREATE TABLE $sql$ || output_table || $sql$ AS
	select test_id as id, $sql$ || test_column_name || $sql$, mode() within group(order by $sql$ || label_column_name || $sql$) as predLabel from pg_temp.madlib_knn_interm join $sql$ || textin(regclassout(test_source)) || $sql$  on test_id=$sql$ || id_column_name || $sql$ group by test_id, $sql$ || test_column_name;
        ELSE
        EXECUTE
        $sql$
	CREATE TABLE $sql$ || output_table || $sql$ AS
        select test_id as id, $sql$ || test_column_name || $sql$ ,avg($sql$ || label_column_name || $sql$) as predLabel from pg_temp.madlib_knn_interm join $sql$ || textin(regclassout(test_source)) || $sql$  on test_id=$sql$ || id_column_name || $sql$ group by test_id, $sql$ || test_column_name || $sql$ order by test_id $sql$;
        END IF;

   EXECUTE 'SET client_min_messages TO ' || oldClientMinMessages;
   IF (operation = 'c') THEN
   	returnstring := 'The classification results have been written to table';
   ELSE
        returnstring := 'The regression results have been written to table';
   END IF;
   DROP TABLE pg_temp.madlib_knn_interm;
   RETURN returnstring;
END;
$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.knn(
    point_source VARCHAR,
    point_column_name VARCHAR,
    label_column_name VARCHAR,
    test_source VARCHAR,
    test_column_name VARCHAR,
    id_column_name VARCHAR,
    output_table VARCHAR,
    operation VARCHAR
) RETURNS VARCHAR AS $$
DECLARE
    returnstring VARCHAR;
BEGIN
    returnstring = MADLIB_SCHEMA.knn($1,$2,$3,$4,$5,$6,$7,$8,1);
    RETURN returnstring;
END;
$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

