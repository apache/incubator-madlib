m4_include(`SQLCommon.m4')

---------------------------------------------------------------------------
-- Rules:
-- ------
-- 1) Any DB objects should be created w/o schema prefix,
--    since this file is executed in a separate schema context.
-- 2) There should be no DROP statements in this script, since
--    all objects created in the default schema will be cleaned-up outside.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Test:
---------------------------------------------------------------------------
select MADLIB_SCHEMA.svec_dmin(1000,1000.1);
select MADLIB_SCHEMA.svec_dmin(1000,NULL);
select MADLIB_SCHEMA.svec_dmin(NULL,1000);
select MADLIB_SCHEMA.svec_dmin(NULL,NULL);
select MADLIB_SCHEMA.svec_dmax(1000,1000.1);
select MADLIB_SCHEMA.svec_dmax(1000,NULL);
select MADLIB_SCHEMA.svec_dmax(NULL,1000);
select MADLIB_SCHEMA.svec_dmax(NULL,NULL);


create table test_pairs( id int, a MADLIB_SCHEMA.svec, b MADLIB_SCHEMA.svec );
insert into test_pairs values
       (0, '{1,100,1}:{5,0,5}', '{50,50,2}:{1,2,10}'),
       (1, '{1,100,1}:{-5,0,-5}', '{50,50,2}:{-1,-2,-10}');
insert into test_pairs values
--       (10, null, null),
       (11, '{1}:{0}', '{1}:{1}'),
       (12, '{1}:{5}', '{3}:{-8}'),
       (13, '{1}:{0}', '{1}:{NULL}'),
       (14, '{1,2,1}:{2,4,2}', '{2,1,1}:{0,3,5}'),
       (15, '{1,2,1}:{2,4,2}', '{2,1,1}:{NULL,3,5}');


select id, MADLIB_SCHEMA.svec_count(a,b) from test_pairs where MADLIB_SCHEMA.svec_dimension(a) = MADLIB_SCHEMA.svec_dimension(b) order by id;
select id, MADLIB_SCHEMA.svec_plus(a,b) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_plus(a,b) OPERATOR(MADLIB_SCHEMA.=) MADLIB_SCHEMA.svec_plus(b,a) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_mult(a,b) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_mult(a,b) OPERATOR(MADLIB_SCHEMA.=) MADLIB_SCHEMA.svec_mult(b,a) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_div(a,b) OPERATOR(MADLIB_SCHEMA.=) MADLIB_SCHEMA.svec_mult(a, MADLIB_SCHEMA.svec_pow(b,(-1)::MADLIB_SCHEMA.svec)) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_minus(a, b) OPERATOR(MADLIB_SCHEMA.=) MADLIB_SCHEMA.svec_plus(MADLIB_SCHEMA.svec_mult((-1)::MADLIB_SCHEMA.svec,b), a) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_pow(a,2::MADLIB_SCHEMA.svec) OPERATOR(MADLIB_SCHEMA.=) MADLIB_SCHEMA.svec_mult(a,a) from test_pairs order by id;

select id, MADLIB_SCHEMA.svec_dot(a,b) from test_pairs where MADLIB_SCHEMA.svec_dimension(a) = MADLIB_SCHEMA.svec_dimension(b) order by id;
select id, MADLIB_SCHEMA.svec_dot(a,b) = MADLIB_SCHEMA.svec_dot(b,a) from test_pairs where MADLIB_SCHEMA.svec_dimension(a) = MADLIB_SCHEMA.svec_dimension(b) order by id;
select id, MADLIB_SCHEMA.svec_dot(a,b::float8[]) = MADLIB_SCHEMA.svec_dot(b,a::float8[]) from test_pairs where MADLIB_SCHEMA.svec_dimension(a) = MADLIB_SCHEMA.svec_dimension(b) order by id;
select id, MADLIB_SCHEMA.svec_dot(a::float8[],b) = MADLIB_SCHEMA.svec_dot(b::float8[],a) from test_pairs where MADLIB_SCHEMA.svec_dimension(a) = MADLIB_SCHEMA.svec_dimension(b) order by id;
select id, MADLIB_SCHEMA.svec_dot(a::float8[],b::float8[]) = MADLIB_SCHEMA.svec_dot(b::float8[],a::float8[]) from test_pairs where MADLIB_SCHEMA.svec_dimension(a) = MADLIB_SCHEMA.svec_dimension(b) order by id;

select id, MADLIB_SCHEMA.svec_l2norm(a), MADLIB_SCHEMA.svec_l2norm(a::float[]), MADLIB_SCHEMA.svec_l2norm(b), MADLIB_SCHEMA.svec_l2norm(b::float8[]) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_l1norm(a), MADLIB_SCHEMA.svec_l1norm(a::float[]), MADLIB_SCHEMA.svec_l1norm(b), MADLIB_SCHEMA.svec_l1norm(b::float8[]) from test_pairs order by id;

select MADLIB_SCHEMA.svec_plus('{1,2,3}:{4,5,6}', 5::MADLIB_SCHEMA.svec);
select MADLIB_SCHEMA.svec_plus(5::MADLIB_SCHEMA.svec, '{1,2,3}:{4,5,6}');
select MADLIB_SCHEMA.svec_plus(500::MADLIB_SCHEMA.svec, '{1,2,3}:{4,null,6}');
select MADLIB_SCHEMA.svec_div(500::MADLIB_SCHEMA.svec, '{1,2,3}:{4,null,6}');
select MADLIB_SCHEMA.svec_div('{1,2,3}:{4,null,6}', 500::MADLIB_SCHEMA.svec);

-- Test operators between svec and float8[]
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)           OPERATOR(MADLIB_SCHEMA.%*%) ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[];
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[] OPERATOR(MADLIB_SCHEMA.%*%) ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec);
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)            OPERATOR(MADLIB_SCHEMA./)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[];
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[]  OPERATOR(MADLIB_SCHEMA./)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec);
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)            OPERATOR(MADLIB_SCHEMA.*)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[];
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[]  OPERATOR(MADLIB_SCHEMA.*)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec);
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)            OPERATOR(MADLIB_SCHEMA.+)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[];
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[]  OPERATOR(MADLIB_SCHEMA.+)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec);
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)            OPERATOR(MADLIB_SCHEMA.-)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[];
select ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec)::float8[]  OPERATOR(MADLIB_SCHEMA.-)  ('{1,2,3,4}:{3,4,5,6}'::MADLIB_SCHEMA.svec);

-- these should produce error messages
/*
select '{10000000000000000000}:{1}'::MADLIB_SCHEMA.svec ;
select '{1,null,2}:{2,3,4}'::MADLIB_SCHEMA.svec;
select MADLIB_SCHEMA.svec_count('{1,1,1}:{3,4,5}', '{2,2}:{1,3}');
select MADLIB_SCHEMA.svec_plus('{1,1,1}:{3,4,5}', '{2,2}:{1,3}');
select MADLIB_SCHEMA.svec_minus('{1,1,1}:{3,4,5}', '{2,2}:{1,3}');
select MADLIB_SCHEMA.svec_mult('{1,1,1}:{3,4,5}', '{2,2}:{1,3}');
select MADLIB_SCHEMA.svec_div('{1,1,1}:{3,4,5}', '{2,2}:{1,3}');
*/

select MADLIB_SCHEMA.svec_unnest('{1}:{5}'::MADLIB_SCHEMA.svec);
select MADLIB_SCHEMA.svec_unnest('{1,2,3,4}:{5,6,7,8}'::MADLIB_SCHEMA.svec);
select MADLIB_SCHEMA.svec_unnest('{1,2,3,4}:{5,6,null,8}'::MADLIB_SCHEMA.svec);
select id, MADLIB_SCHEMA.svec_unnest(a),a from test_pairs where id >= 10 order by id;

select MADLIB_SCHEMA.svec_pivot('{1}:{5}', 2);
select MADLIB_SCHEMA.svec_pivot('{1}:{5}', 5);
select MADLIB_SCHEMA.svec_pivot('{1}:{5}', null);
select MADLIB_SCHEMA.svec_pivot('{1}:{null}', 5);
select MADLIB_SCHEMA.svec_pivot('{1}:{null}', null);
select MADLIB_SCHEMA.svec_pivot('{1,2,3,4}:{5,6,7,8}'::MADLIB_SCHEMA.svec, 2);
select id, MADLIB_SCHEMA.svec_pivot(a, 5), a, MADLIB_SCHEMA.svec_pivot(a,6), a, MADLIB_SCHEMA.svec_pivot(a,2) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_pivot(b, 5), b, MADLIB_SCHEMA.svec_pivot(b,6), b, MADLIB_SCHEMA.svec_pivot(b,null) from test_pairs order by id;

select MADLIB_SCHEMA.svec_elsum('{1}:{-5}'::MADLIB_SCHEMA.svec);
select id, a, MADLIB_SCHEMA.svec_elsum(a), a, b, MADLIB_SCHEMA.svec_elsum(b), b from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_elsum(a) = MADLIB_SCHEMA.svec_elsum(a::float8[]) from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_elsum(b) = MADLIB_SCHEMA.svec_elsum(b::float8[]) from test_pairs order by id;

select id, a, MADLIB_SCHEMA.svec_median(a), a from test_pairs order by id;
select id, b, MADLIB_SCHEMA.svec_median(b), b from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_median(a) = MADLIB_SCHEMA.svec_median(a::float8[]),
           MADLIB_SCHEMA.svec_median(b) = MADLIB_SCHEMA.svec_median(b::float8[]) from test_pairs order by id;

select id, a, b, MADLIB_SCHEMA.svec_concat(a,b), a, b from test_pairs order by id;

select id, MADLIB_SCHEMA.svec_concat_replicate(0, b), b from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_concat_replicate(1, b) OPERATOR(MADLIB_SCHEMA.=) b from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_concat_replicate(3, b), b from test_pairs order by id;
-- select id, MADLIB_SCHEMA.svec_concat_replicate(-2, b), b from test_pairs order by id; -- this should produce error message

select id, MADLIB_SCHEMA.svec_dimension(a), a, MADLIB_SCHEMA.svec_dimension(b), b from test_pairs order by id;

select MADLIB_SCHEMA.svec_lapply('sqrt', null);
select id, MADLIB_SCHEMA.svec_lapply('sqrt', MADLIB_SCHEMA.svec_lapply('abs', a)), a from test_pairs order by id;
select id, MADLIB_SCHEMA.svec_lapply('sqrt', MADLIB_SCHEMA.svec_lapply('abs', b)), b from test_pairs order by id;

select MADLIB_SCHEMA.svec_append(null::MADLIB_SCHEMA.svec, 220::float8, 20::int8);
select id, MADLIB_SCHEMA.svec_append(a, 50, 100), a, MADLIB_SCHEMA.svec_append(b, null, 50), b from test_pairs order by id;

select MADLIB_SCHEMA.svec_proj(a,1), a, MADLIB_SCHEMA.svec_proj(b,1), b from test_pairs order by id;
-- select MADLIB_SCHEMA.svec_proj(a,2), a, MADLIB_SCHEMA.svec_proj(b,2), b from test_pairs order by id; -- this should result in an appropriate error message

select MADLIB_SCHEMA.svec_subvec('{1,20,30,10,600,2}:{1,2,3,4,5,6}', 3,69);
select MADLIB_SCHEMA.svec_subvec('{1,20,30,10,600,2}:{1,2,3,4,5,6}', 69,3);
select MADLIB_SCHEMA.svec_subvec(a,2,4), a from test_pairs where MADLIB_SCHEMA.svec_dimension(a) >= 4 order by id;
select MADLIB_SCHEMA.svec_subvec(a,2,MADLIB_SCHEMA.svec_dimension(a)-1), a from test_pairs where MADLIB_SCHEMA.svec_dimension(a) >= 2 order by id;
-- select MADLIB_SCHEMA.svec_subvec(a,MADLIB_SCHEMA.svec_dimension(a)-1,0), a from test_pairs where MADLIB_SCHEMA.svec_dimension(a) >= 2 order by id;

select MADLIB_SCHEMA.svec_reverse(a), a, MADLIB_SCHEMA.svec_reverse(b), b from test_pairs order by id;
select MADLIB_SCHEMA.svec_subvec('{1,20,30,10,600,2}:{1,2,3,4,5,6}', 3,69) OPERATOR(MADLIB_SCHEMA.=)
       MADLIB_SCHEMA.svec_reverse(MADLIB_SCHEMA.svec_subvec('{1,20,30,10,600,2}:{1,2,3,4,5,6}', 69,3));

select MADLIB_SCHEMA.svec_change('{1,20,30,10,600,2}:{1,2,3,4,5,6}', 3, '{2,3}:{4,null}');
select MADLIB_SCHEMA.svec_change(a,1,'{1}:{-50}'), a from test_pairs order by id;

-- Test the multi-concatenation and show sizes compared with a normal array
create table corpus_proj as (select 10000 OPERATOR(MADLIB_SCHEMA.*||) ('{45,2,35,4,15,1}:{0,1,0,1,0,2}'::MADLIB_SCHEMA.svec) result );
create table corpus_proj_array as (select result::float8[] from corpus_proj);
-- Calculate on-disk size of sparse vector
select pg_size_pretty(pg_total_relation_size('corpus_proj'));
-- Calculate on-disk size of normal array
select pg_size_pretty(pg_total_relation_size('corpus_proj_array'));

-- Calculate L1 norm from sparse vector
select MADLIB_SCHEMA.svec_l1norm(result) from corpus_proj;
-- Calculate L1 norm from float8[]
select MADLIB_SCHEMA.svec_l1norm(result) from corpus_proj_array;
-- Calculate L2 norm from sparse vector
select MADLIB_SCHEMA.svec_l2norm(result) from corpus_proj;
-- Calculate L2 norm from float8[]
select MADLIB_SCHEMA.svec_l2norm(result) from corpus_proj_array;

create table svec_svec as (
select
    1000 OPERATOR(MADLIB_SCHEMA.*||) ('{45,2,35,4,15,1}:{0,1,0,1,0,2}'::MADLIB_SCHEMA.svec) result1,
    1000 OPERATOR(MADLIB_SCHEMA.*||) ('{35,2,45,4,15,1}:{2,0,1,1,0,4}'::MADLIB_SCHEMA.svec) result2 );
-- Calculate L1 norm from two sparse vectors
select MADLIB_SCHEMA.l1norm(result1, result2) from svec_svec;
-- Calculate L2 norm from two sparse vectors
select MADLIB_SCHEMA.l2norm(result1, result2) from svec_svec;
-- Calculate angle between two sparse vectors
select MADLIB_SCHEMA.angle(result1, result2) from svec_svec;
-- Calculate tanimoto distance between two sparse vectors
select MADLIB_SCHEMA.tanimoto_distance(result1, result2) from svec_svec;

-- Calculate normalized vectors
select MADLIB_SCHEMA.normalize(result) from corpus_proj;

-- Test the pivot operator
create table pivot_test(a float8);
insert into pivot_test values (0),(1),(0),(2),(3);
-- select MADLIB_SCHEMA.svec_agg(a) from pivot_test;
select MADLIB_SCHEMA.svec_l1norm(MADLIB_SCHEMA.svec_agg(a)) from pivot_test;
-- Answer should be 5
select MADLIB_SCHEMA.svec_median(MADLIB_SCHEMA.svec_agg(a)) from (select generate_series(1,9) a) foo;
-- Answer should be a 10-wide vector
select MADLIB_SCHEMA.svec_agg(a) from (select trunc(random()*10) a,generate_series(1,100000) order by a) foo;
-- Average is 4.50034, median is 5
select MADLIB_SCHEMA.svec_median('{9960,9926,10053,9993,10080,10050,9938,9941,10030,10029}:{1,9,8,7,6,5,4,3,2,0}'::MADLIB_SCHEMA.svec);
select MADLIB_SCHEMA.svec_median('{9960,9926,10053,9993,10080,10050,9938,9941,10030,10029}:{1,9,8,7,6,5,4,3,2,0}'::MADLIB_SCHEMA.svec::float8[]);

-- This vfunction test svec creation from position array
select MADLIB_SCHEMA.svec_cast_positions_float8arr('{1,2,4,6,2,5}'::INT8[], '{.2,.3,.4,.5,.3,.1}'::FLOAT8[], 10000, 0.0);

-- test of functions returning positions and values of non-base values
select MADLIB_SCHEMA.svec_nonbase_values('{1,2,3,1000,4}:{1,2,3,0,4}'::MADLIB_SCHEMA.SVEC, 0.0::float8);
select MADLIB_SCHEMA.svec_nonbase_positions('{1,2,3,1000,4}:{1,2,3,0,4}'::MADLIB_SCHEMA.SVEC, 0.0::float8);

-- svec conversion to and from string
select MADLIB_SCHEMA.svec_to_string('{2,3}:{4,5}');
select MADLIB_SCHEMA.svec_from_string('{2,3}:{4,5}');

-- UDA: MADLIB_SCHEMA.mean(svec)
create table test_svec (a int, b MADLIB_SCHEMA.svec);
select MADLIB_SCHEMA.mean(b) from test_svec;
insert into test_svec select 1, '{1,2,3}'::float[]::MADLIB_SCHEMA.svec;
insert into test_svec select 2, '{2,2.5,3.1}'::float[]::MADLIB_SCHEMA.svec;
insert into test_svec select 3, '{3,3,3.2}'::float[]::MADLIB_SCHEMA.svec;
select MADLIB_SCHEMA.mean(b) from test_svec;

create table _dictionary (id bigint, dict_terms text[]);
insert into _dictionary values('1', '{am,before,being,bothered,corpus,document,i,in,is,me,never,now,one,really,second,the,third,this,until}');
create table dictionary as select generate_series(0, array_upper(dict_terms, 1) - 1) id, unnest(dict_terms) term from _dictionary;
create table _documents(id bigint, terms text[]);
insert into _documents values
    (1,'{this,is,one,document,in,the,corpus}'),
    (2,'{i,am,the,second,document,in,the,corpus}'),
    (3,'{being,third,never,really,bothered,me,until,now}'),
    (4,'{the,document,before,me,is,the,third,document}');
create table documents as select id, unnest term, count(*) from ( select id, unnest(terms) from _documents) s  group by id, term;
select * from MADLIB_SCHEMA.gen_doc_svecs('output','dictionary' ,'id', 'term', 'documents', 'id', 'term', 'count');
select * from output order by doc_id;

select
    MADLIB_SCHEMA.assert(count(*) = 2, '__gen_svec for indices bigger than 255')
from
(
    select
        MADLIB_SCHEMA.svec_unnest(
            MADLIB_SCHEMA.__gen_svec('{7855,8623}', '{1,1}', 8624)
        ) as b
) a
where not b = 0;

---------------------------------------------------------------------------
-- operators
SELECT MADLIB_SCHEMA.assert(NOT '{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.==) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.==)');
SELECT MADLIB_SCHEMA.assert('{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.==) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.==)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.=) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.=)');
SELECT MADLIB_SCHEMA.assert('{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.=)');
SELECT MADLIB_SCHEMA.assert('{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<>) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<>)');
SELECT MADLIB_SCHEMA.assert(NOT '{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<>) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<>)');

--
SELECT MADLIB_SCHEMA.assert('{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,3}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');
SELECT MADLIB_SCHEMA.assert('{2,4}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');

SELECT MADLIB_SCHEMA.assert(NOT '{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');
SELECT MADLIB_SCHEMA.assert('{500,300,400}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');
SELECT MADLIB_SCHEMA.assert('{500,300,200,1}:{1,1,1,-1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>)');

--
SELECT MADLIB_SCHEMA.assert(NOT '{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');
SELECT MADLIB_SCHEMA.assert('{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,3}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,4}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');

SELECT MADLIB_SCHEMA.assert(NOT '{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');
SELECT MADLIB_SCHEMA.assert(NOT '{500,300,400}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');
SELECT MADLIB_SCHEMA.assert(NOT '{500,300,200,1}:{1,1,1,-1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<)');

--
SELECT MADLIB_SCHEMA.assert('{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');
SELECT MADLIB_SCHEMA.assert('{2,3}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');
SELECT MADLIB_SCHEMA.assert('{2,4}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');

SELECT MADLIB_SCHEMA.assert('{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');
SELECT MADLIB_SCHEMA.assert('{500,300,400}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');
SELECT MADLIB_SCHEMA.assert('{500,300,200,1}:{1,1,1,-1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.>=)');

--
SELECT MADLIB_SCHEMA.assert(NOT '{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1,1,1,2}:{1,0,1,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');
SELECT MADLIB_SCHEMA.assert('{2,1}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');
SELECT MADLIB_SCHEMA.assert('{2,3}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');
SELECT MADLIB_SCHEMA.assert(NOT '{2,4}:{1,0}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1,1,1,2}:{1,1,0,0}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');

SELECT MADLIB_SCHEMA.assert('{500,300,200}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');
SELECT MADLIB_SCHEMA.assert(NOT '{500,300,400}:{1,1,1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');
SELECT MADLIB_SCHEMA.assert(NOT '{500,300,200,1}:{1,1,1,-1}'::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1000}:{1}'::MADLIB_SCHEMA.svec, 'svec OPERATOR(MADLIB_SCHEMA.<=)');

-- MADLIB-642
CREATE TABLE madlib_642(id serial, id2 MADLIB_SCHEMA.svec);
INSERT INTO madlib_642(id2) VALUES
(ARRAY[1,1,0]::float8[]::MADLIB_SCHEMA.svec),
(ARRAY[1,0,0]::float8[]::MADLIB_SCHEMA.svec),
(ARRAY[1,0,1]::float8[]::MADLIB_SCHEMA.svec);

SELECT MADLIB_SCHEMA.assert(
    count(id) = 2,
    'Wrong Result of predicates w/ <svec>')
FROM madlib_642
WHERE id2 OPERATOR(MADLIB_SCHEMA.<>) ARRAY[1,1,0]::float8[]::MADLIB_SCHEMA.svec;

-- SELECT MADLIB_SCHEMA.assert(
--     count(c) = 3,
--     'Wrong Result of GROUP BY <madlib.svec>')
-- FROM (
--     SELECT id2, count(id) AS c
--     FROM madlib_642
--     GROUP BY id2
-- ) subq;

-- Handling NaNs
-- IEEE754 specifies that NaN should not compare equal to any other
-- floating-point value (including NaN). In order to allow floating-point
-- values to be sorted and used in tree-based indexes, PostgreSQL treats
-- NaN values as equal, and greater than all non-NaN values (including Inf).
SELECT MADLIB_SCHEMA.assert('{1,NULL}'::float8[]::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1,NaN}'::float8[]::MADLIB_SCHEMA.svec, 'svec: NULL > NaN fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,NaN}'::float8[]::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.>) '{1,9999,35}'::float8[]::MADLIB_SCHEMA.svec, 'svec: NaN > 9999 fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,Infinity}'::float8[]::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.<=) '{1,NaN,9999,35}'::float8[]::MADLIB_SCHEMA.svec, 'svec: Inf <= NaN fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,NULL}'::float8[]::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.=) '{1,NULL}'::float8[]::MADLIB_SCHEMA.svec, 'svec: NULL = NULL fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,NaN}'::float8[]::MADLIB_SCHEMA.svec OPERATOR(MADLIB_SCHEMA.=) '{1,NaN}'::float8[]::MADLIB_SCHEMA.svec, 'svec: NaN = NaN fails unexpectedly');

-- make sure float8[] has the same behaviors
SELECT MADLIB_SCHEMA.assert('{1,NULL}'::float8[] > '{1,NaN}'::float8[], 'float8[]: NULL > NaN fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,NaN}'::float8[] > '{1,9999,35}'::float8[], 'float8[]: NaN > 9999 fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,Infinity}'::float8[] <= '{1,NaN,9999,35}'::float8[], 'float8[]: Inf <= NaN fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,NULL}'::float8[] = '{1,NULL}'::float8[], 'float8[]: NULL = NULL fails unexpectedly');
SELECT MADLIB_SCHEMA.assert('{1,NaN}'::float8[] = '{1,NaN}'::float8[], 'float8[]: NaN = NaN fails unexpectedly');
